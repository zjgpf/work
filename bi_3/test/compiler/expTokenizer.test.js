const assert = require('assert');
const Tokenizer = require('../../src/compiler/expTokenizer');

describe('expTokenizer', function () {
    describe('', function () {

        it('test1', async () => {
            const expStr = '(10*$$.colA+sum(余额表.{(账期>=issue("2019-01",sum(1,3)) and 账期 <= 选择账期) and ((科目编码 = $$.colB or 科目编码 = 1001*) and 科目编码 != 10012 ) and (本期借>=0)}.本期借, 10, $$.colD, sum(1,2)))/-(sum($10.colC: $20.colC))'
            const tokens = Tokenizer.tokenize(expStr)
            const expected = 
[ 
  [ '(', 't_symbols' ],                            
  [ '10', 't_integer_constant' ],                  
  [ '*', 't_ops' ],                                
  [ '$$.colA', 't_reference' ],                    
  [ '+', 't_ops' ],                                
  [ 'sum', 't_str_constant' ],                     
  [ '(', 't_symbols' ],                            
  [ '余额表', 't_str_constant' ],                  
  [ '.', 't_symbols' ],                            
  [ '{', 't_symbols' ],                            
  [ '(', 't_symbols' ],                            
  [ '账期', 't_str_constant' ],                    
  [ '>=', 't_compare_ops' ],                       
  [ 'issue', 't_str_constant' ],                   
  [ '(', 't_symbols' ],                            
  [ '2019-01', 't_str_constant' ],                 
  [ ',', 't_symbols' ],                            
  [ 'sum', 't_str_constant' ],                     
  [ '(', 't_symbols' ],                            
  [ '1', 't_integer_constant' ],                   
  [ ',', 't_symbols' ],                            
  [ '3', 't_integer_constant' ],                   
  [ ')', 't_symbols' ],                            
  [ ')', 't_symbols' ],                            
  [ 'and', 't_boolean_ops' ],                      
  [ '账期', 't_str_constant' ],                    
  [ '<=', 't_compare_ops' ],                       
  [ '选择账期', 't_str_constant' ],                
  [ ')', 't_symbols' ],                            
  [ 'and', 't_boolean_ops' ],                      
  [ '(', 't_symbols' ],                            
  [ '(', 't_symbols' ],                            
  [ '科目编码', 't_str_constant' ],                
  [ '=', 't_compare_ops' ],                        
  [ '$$.colB', 't_reference' ],                    
  [ 'or', 't_boolean_ops' ],                       
  [ '科目编码', 't_str_constant' ],                
  [ '=', 't_compare_ops' ],                        
  [ '1001', 't_integer_constant' ],                
  [ '*', 't_ops' ],                                
  [ ')', 't_symbols' ],                            
  [ 'and', 't_boolean_ops' ],                      
  [ '科目编码', 't_str_constant' ],                
  [ '!=', 't_compare_ops' ],                       
  [ '10012', 't_integer_constant' ],               
  [ ')', 't_symbols' ],                            
  [ 'and', 't_boolean_ops' ],                      
  [ '(', 't_symbols' ],                            
  [ '本期借', 't_str_constant' ], 
  [ '>=', 't_compare_ops' ],
  [ '0', 't_integer_constant' ],
  [ ')', 't_symbols' ],
  [ '}', 't_symbols' ],
  [ '.', 't_symbols' ],
  [ '本期借', 't_str_constant' ],
  [ ',', 't_symbols' ],
  [ '10', 't_integer_constant' ],
  [ ',', 't_symbols' ],
  [ '$$.colD', 't_reference' ],
  [ ',', 't_symbols' ],
  [ 'sum', 't_str_constant' ],
  [ '(', 't_symbols' ],
  [ '1', 't_integer_constant' ],
  [ ',', 't_symbols' ],
  [ '2', 't_integer_constant' ],
  [ ')', 't_symbols' ],
  [ ')', 't_symbols' ],
  [ ')', 't_symbols' ],
  [ '/', 't_ops' ],
  [ '-', 't_ops' ],
  [ '(', 't_symbols' ],
  [ 'sum', 't_str_constant' ],
  [ '(', 't_symbols' ],
  [ '$10.colC', 't_reference' ],
  [ ':', 't_ops' ],
  [ '$20.colC', 't_reference' ],
  [ ')', 't_symbols' ],
  [ ')', 't_symbols' ] 
]
        assert.deepEqual(tokens, expected)
        });

        it('test2', async () => {
            const expStr = '(-10.1*$$.colA+sum(余额表.{(账期>=issue("2019-01",sum(1,3)) and 账期 <= 选择账期) and ((科目编码 in $$.colB or 科目编码 = "1001*") and (科目编码 not_in [10012, 1230])) and (本期借>=0)}.本期借, -10.3, $$.colD, sum(1,2.6)))/-(sum($10.colC:$20.colC))'
            const tokens = Tokenizer.tokenize(expStr)
            expected =
[ 
  [ '(', 't_symbols' ],                            
  [ '-', 't_ops' ],                                
  [ '10.1', 't_float_constant' ],                  
  [ '*', 't_ops' ],                                
  [ '$$.colA', 't_reference' ],                    
  [ '+', 't_ops' ],                                
  [ 'sum', 't_str_constant' ],                     
  [ '(', 't_symbols' ],                            
  [ '余额表', 't_str_constant' ],                  
  [ '.', 't_symbols' ],                            
  [ '{', 't_symbols' ],                            
  [ '(', 't_symbols' ],                            
  [ '账期', 't_str_constant' ],                    
  [ '>=', 't_compare_ops' ],                       
  [ 'issue', 't_str_constant' ],                   
  [ '(', 't_symbols' ],                            
  [ '2019-01', 't_str_constant' ],                 
  [ ',', 't_symbols' ],                            
  [ 'sum', 't_str_constant' ],                     
  [ '(', 't_symbols' ],                            
  [ '1', 't_integer_constant' ],                   
  [ ',', 't_symbols' ],                            
  [ '3', 't_integer_constant' ],                   
  [ ')', 't_symbols' ],                            
  [ ')', 't_symbols' ],                            
  [ 'and', 't_boolean_ops' ],                      
  [ '账期', 't_str_constant' ],                    
  [ '<=', 't_compare_ops' ],                       
  [ '选择账期', 't_str_constant' ],                
  [ ')', 't_symbols' ],                            
  [ 'and', 't_boolean_ops' ],                      
  [ '(', 't_symbols' ],                            
  [ '(', 't_symbols' ],                            
  [ '科目编码', 't_str_constant' ],                
  [ 'in', 't_compare_ops' ],                       
  [ '$$.colB', 't_reference' ],                    
  [ 'or', 't_boolean_ops' ],                       
  [ '科目编码', 't_str_constant' ],                
  [ '=', 't_compare_ops' ],                        
  [ '1001*', 't_str_constant' ],                   
  [ ')', 't_symbols' ],                            
  [ 'and', 't_boolean_ops' ],                                                                         
  [ '(', 't_symbols' ],                            
  [ '科目编码', 't_str_constant' ],                
  [ 'not_in', 't_compare_ops' ],                   
  [ '[', 't_symbols' ],                            
  [ '10012', 't_integer_constant' ],               
  [ ',', 't_symbols' ],                            
  [ '1230', 't_integer_constant' ],           
  [ ']', 't_symbols' ],                            
  [ ')', 't_symbols' ],                            
  [ ')', 't_symbols' ],                            
  [ 'and', 't_boolean_ops' ],                      
  [ '(', 't_symbols' ],                            
  [ '本期借', 't_str_constant' ],                  
  [ '>=', 't_compare_ops' ],                       
  [ '0', 't_integer_constant' ],                   
  [ ')', 't_symbols' ],                            
  [ '}', 't_symbols' ],                            
  [ '.', 't_symbols' ],                            
  [ '本期借', 't_str_constant' ],                  
  [ ',', 't_symbols' ],                            
  [ '-', 't_ops' ],                                
  [ '10.3', 't_float_constant' ],                  
  [ ',', 't_symbols' ],                            
  [ '$$.colD', 't_reference' ],                    
  [ ',', 't_symbols' ],                            
  [ 'sum', 't_str_constant' ],                     
  [ '(', 't_symbols' ],                            
  [ '1', 't_integer_constant' ],                   
  [ ',', 't_symbols' ],                            
  [ '2.6', 't_float_constant' ],                   
  [ ')', 't_symbols' ],                            
  [ ')', 't_symbols' ],                            
  [ ')', 't_symbols' ],                            
  [ '/', 't_ops' ],                                
  [ '-', 't_ops' ],                                
  [ '(', 't_symbols' ],                            
  [ 'sum', 't_str_constant' ],                     
  [ '(', 't_symbols' ],                            
  [ '$10.colC', 't_reference' ],                                                                     
  [ ':', 't_ops' ],      
  [ '$20.colC', 't_reference' ],                   
  [ ')', 't_symbols' ],                            
  [ ')', 't_symbols' ] 
]   

            assert.deepEqual(tokens, expected)
        });

        it('test3', async () => {
            const expStr = '"aa1"'
            const tokens = Tokenizer.tokenize(expStr)
            assert.deepEqual(tokens, [ [ 'aa1', 't_str_constant' ] ])
        });

    });
});
